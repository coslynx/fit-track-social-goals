import React from 'react';
import PropTypes from 'prop-types';
import { generateRandomId } from '../../utils/helpers';
import { sanitizeInput } from '../../utils/helpers';

/**
 * A reusable input component with customizable text, styles, and change handling.
 *
 * @param {object} props - The component props.
 * @param {string} [props.type="text"] - The type of input (text, password, email, etc.). Defaults to "text".
 * @param {string} [props.placeholder] - The placeholder text for the input.
 * @param {string} props.value - The current value of the input.
 * @param {function} props.onChange - A function to handle changes to the input value.
 * @param {string} [props.label] - An optional label for the input.
 * @param {string} [props.id] - An optional ID for the input element. Autogenerated if not provided.
 * @param {string} [props.name] - An optional name for the input element.
 * @param {boolean} [props.required=false] - Specifies if the input is mandatory. Defaults to false.
 * @param {string} [props.error] - An error message to display below the input.
 * @param {object} [props.style] - Optional inline styles for the input.
 *
 * @returns {JSX.Element} An input element with optional label and error message.
 *
 * @example
 *  <Input
 *    type="text"
 *    placeholder="Enter your username"
 *    value={username}
 *    onChange={(e) => setUsername(e.target.value)}
 *    label="Username"
 *    required
 *    error={usernameError}
 *  />
 */
const Input = React.memo(({
  type = 'text',
  placeholder,
  value,
  onChange,
  label,
  id,
  name,
  required = false,
  error,
  style,
}) => {
  // Generate a unique id if one is not provided
  const inputId = id || generateRandomId();


  // Function to handle input value changes and sanitize value
  const handleChange = (event) => {
    const sanitizedValue = sanitizeInput(event.target.value);
    onChange(sanitizedValue, event);
  };


  return (
    <div className="mb-4">
      {label && (
        <label
          htmlFor={inputId}
          className="block text-gray-700 text-sm font-bold mb-2"
        >
          {label}
        </label>
      )}
      <input
        type={type}
        id={inputId}
        name={name}
        placeholder={placeholder}
        value={value || ''}
        onChange={handleChange}
        required={required}
        style={style}
        className="border border-gray-300 rounded px-4 py-2 focus:outline-none focus:border-blue-500 w-full"
      />
       {error && <p className="text-red-500 text-sm mt-1">{error}</p>}
    </div>
  );
});


// Define PropTypes for type checking and documentation purposes.
Input.propTypes = {
    type: PropTypes.string,
    placeholder: PropTypes.string,
    value: PropTypes.string.isRequired,
    onChange: PropTypes.func.isRequired,
    label: PropTypes.string,
    id: PropTypes.string,
    name: PropTypes.string,
    required: PropTypes.bool,
    error: PropTypes.string,
    style: PropTypes.object,
};

export default Input;